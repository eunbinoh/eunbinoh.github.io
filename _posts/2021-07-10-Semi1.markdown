---
layout: post
title:  "회원가입 & 로그인"
categories: [Project]
tags: [Login, JOIN, java, 정규표현식, 유효성검사]
---

## Small_Project MyPT
- 전체적인 구성 : 운동 스케줄 관리, 식단 다이어리, 운동 커뮤니티 게시판, 운동용품 쇼핑&리뷰 
- 내가 구현한 기능 : 회원가입, 로그인, 정보관리, 식단 다이어리, 운동용품 별점 리뷰, 소개글
- 사용한 기술 : 가입시 정규표현식 필터 및 유효성검사, 이메일 인증, 로그인 세션관리, 비밀번호 암호화(SHA-512), 회원정보 수정&탈퇴, 
식단 목록 + 날짜 + 텍스트 기록, 목록 관리&삭제, ajax 실시간 댓글(시간,별점,수정삭제 각각 첨부)        
         

### 회원가입 & 로그인
  ![Image name](https://eunbinoh.github.io//images/PT1.png){: width="100%" height="100%"}   
- JoinInsertServlet   
     
```javascript   
@WebServlet(urlPatterns="/insert.me", name="JoinInsertServlet")
public class JoinInsertServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
    public JoinInsertServlet() {
        super();
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		
		String userId = request.getParameter("userId");
		String userPwd = request.getParameter("userPwd");
		String userName = request.getParameter("userName");
		String nickName = request.getParameter("nickName");
		String ages = request.getParameter("age");
		String gender = request.getParameter("gender");
		String phone = request.getParameter("phone");
		String email = request.getParameter("email");
		String address = request.getParameter("address");
		String frr[] = request.getParameterValues("ffood");
		
		String ffood= "";
		if(frr != null) {
			for (int i =0; i<frr.length; i++) {
				if(i==frr.length -1) {
					ffood += frr[i];
				} else {
					ffood += frr[i]+",";
				}
			}
		}
		int age = Integer.parseInt(ages);
		
		User user = new User(userId, userPwd, userName, nickName, age, gender, phone, email, address, ffood);
		
		int result = new userService().insertUser(user);
		
		if(result>0) {
			response.sendRedirect(request.getContextPath());
		} else {
			request.setAttribute("msg", "회원가입 실패");
			RequestDispatcher view = request.getRequestDispatcher(Common.ERR_URL);
			view.forward(request,response);
		}
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doGet(request, response);
	}

}


```   

- DAO
   
```java   
public class userDAO {
	private Properties prop = new Properties();
	
	public userDAO() {
		String fileName = userDAO.class.getResource("/query/user-query.properties").getPath();
		try {
			prop.load(new FileReader(fileName));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public User loginUser(Connection conn, User user) {
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		User loginUser = null;
		String query = prop.getProperty("loginUser");
		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1,  user.getUserId());
			pstmt.setString(2,  user.getUserPwd());
			rset = pstmt.executeQuery();

			if(rset.next()) {
				loginUser = new User(rset.getString("ID"),
										rset.getString("PASSWORD"),
										rset.getString("GENDER"),
										rset.getInt("AGE"),
										rset.getString("NAME"),
										rset.getString("NICK_NAME"),
										rset.getString("ADDRESS"),
										rset.getString("EMAIL"),
										rset.getString("PHONE"),
										rset.getString("M_RATING"),
										rset.getString("F_FOOD"),
										rset.getString("SORTATION"),
										rset.getString("STATUS"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			close(rset);
			close(pstmt);
		}
		return loginUser;
	}

	public int insertUser(Connection conn, User user) {
		PreparedStatement pstmt=null;
		int result = 0;
		String query = prop.getProperty("insertUser");
		try {
			pstmt=conn.prepareStatement(query);

			pstmt.setString(1, user.getUserId());
			pstmt.setString(2, user.getUserPwd());
			pstmt.setString(3, user.getGender());
			pstmt.setInt(4, user.getAge());
			pstmt.setString(5, user.getUserName());
			pstmt.setString(6, user.getNickName());
			pstmt.setString(7, user.getAddress());
			pstmt.setString(8, user.getEmail());
			pstmt.setString(9, user.getPhone());
			pstmt.setString(10, user.getFfood());
			result = pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(pstmt);
		}
		return result;
	}

	public int IdCheck(Connection conn, String inputId) {
		System.out.println("inputid:"+inputId);
		String query = prop.getProperty("checkId");
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int result = 0;
		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, inputId);
			
			rs = pstmt.executeQuery();
			if(rs.next()) {
				result = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			close(pstmt);
			close(rs);
		}
		return result;
	}

	public User selectUser(Connection conn, String userId) {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		User user = null;
		String query = prop.getProperty("myPage");
		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, userId);
			rs = pstmt.executeQuery();		
			if(rs.next()) {
				user = new User(rs.getString("ID"),
								rs.getString("PASSWORD"),
								rs.getString("GENDER"),
								rs.getInt("AGE"),
								rs.getString("NAME"),
								rs.getString("NICK_NAME"),
								rs.getString("ADDRESS"),
								rs.getString("EMAIL"),
								rs.getString("PHONE"),
								rs.getString("M_RATING"),
								rs.getString("F_FOOD"),
								rs.getString("SORTATION"),
								rs.getString("STATUS"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			close(rs);
			close(pstmt);
		}	
		return user;
	}

	public int updateUser(Connection conn, User myUser) {
		PreparedStatement pstmt = null;
		int result = 0;
		String query = prop.getProperty("updateUser");
			try {
				pstmt = conn.prepareStatement(query);
				pstmt.setString(1, myUser.getUserPwd());
				pstmt.setInt(2, myUser.getAge());
				pstmt.setString(3, myUser.getUserName());
				pstmt.setString(4, myUser.getNickName());
				pstmt.setString(5, myUser.getAddress());
				pstmt.setString(6, myUser.getEmail());
				pstmt.setString(7, myUser.getPhone());
				pstmt.setString(8, myUser.getFfood());
				pstmt.setString(9, myUser.getUserId());
				result = pstmt.executeUpdate();
				System.out.println("result:"+result);
			} catch (SQLException e) {
				e.printStackTrace();
			}finally {
				close(pstmt);
			}
		return result;
	}

	public int deleteUser(Connection conn, String userId) {
		PreparedStatement pstmt = null;
		int result = 0;
		String query = prop.getProperty("deleteUser");
		try {
			pstmt= conn.prepareStatement(query);
			pstmt.setString(1, userId);
			result = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			close(pstmt);
		}
		return result;
	}
}
   ```

# 오마이갓! 스프링 쓰기전엔 이렇게.. 병아리 시절.. 삐약.
   
### 홈페이지 소개글을 만들면서
-- 학교 다닐 때 이과생이면서도 _글쓰기를 좋아했던 나_ ,   
-- 내가 코딩에 매력을 빠지게 된 건 어쩌면 논리적인 글을 쓰면서부터 시작된 것.   
-- 인과관계, 규칙에 따른 결과, 수식을 더 효과적으로하는 방법을 찾는 것.   
-- 시대적 배경, 필요성, 필요에 따른 장점을 어필하는 재미가 있었다.   
-- 글을 쓰기 시작하면 나도 모르게 술술 써지는것처럼 코딩도 술술 써지는 날이 빨리 왔으면 좋겠다 !   
-- 코드를 쓰는게 점점 익숙해지고 있다는건, 꽤 기분이 좋은 일이다 ^^.   
   
![Image name](https://eunbinoh.github.io//images/PT5.png){: width="100%" height="100%"}
     
